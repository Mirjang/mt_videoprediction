----------------- Options ---------------
               batch_size: 32                            	[default: 1]
                    beta1: 0.5                           
          checkpoints_dir: /mnt/raid/patrickradner/checkpoints	[default: ../checkpoints]
               clip_grads: 0.05                          	[default: 1]
               clips_file: info.csv                      
           continue_train: True                          	[default: False]
                 dataroot: /mnt/raid/patrickradner/datasets/yt//river_relaxing	[default: ../datasets]
             dataset_mode: video                         
              display_env: river_relaxing_dvdgan_trajgru_128_3	[default: main]
             display_freq: 200                           	[default: 400]
               display_id: 1                             
            display_ncols: 4                             
             display_port: 8197                          	[default: 8097]
           display_server: http://localhost              
          display_winsize: 256                           
       dvd_spatial_frames: 8                             
  dvd_temporal_downsample: 2                             
                    epoch: latest                        
              epoch_count: 1                             
                      fps: 25                            	[default: 30]
                generator: trajgru                       	[default: dvdgansimple]
                  gpu_ids: -1                            	[default: 0]
                init_gain: 0.02                          
                init_type: xavier                        
                 input_nc: 3                             
                  isTrain: True                          	[default: None]
                lambda_GP: 1                             
                lambda_L1: 20.0                          	[default: 10.0]
                 lambda_S: 1.0                           	[default: 0.1]
                 lambda_T: 5.0                           	[default: 0.1]
                load_iter: 0                             	[default: 0]
                 lossType: L1                            
                       lr: 0.0003                        	[default: 0.0004]
           lr_decay_iters: 50                            
                lr_policy: lambda                        
          max_clip_length: 1.0                           	[default: 2.0]
         max_dataset_size: inf                           
     max_per_frame_losses: 10                            
     max_val_dataset_size: 100                           	[default: 1000]
                    model: dvdgan                        	[default: simpleVideo]
                 n_critic: 3                             	[default: 2]
                     name: river_relaxing_dvdgan_trajgru_128_3	[default: experiment_name]
                      ndf: 64                            
                      ngf: 64                            
                    niter: 250                           	[default: 100]
              niter_decay: 250                           	[default: 100]
                  no_html: False                         
                 no_lsgan: True                          
                     norm: instance                      
                     nrdf: 64                            
                     nref: 32                            
                     nrhf: 64                            
       num_display_frames: 16                            	[default: 8]
 num_segmentation_classes: 182                           
              num_threads: 6                             
                output_nc: 3                             
     parallell_batch_size: 1                             	[default: None]
                    phase: train                         
                pool_size: 0                             
          pretrain_epochs: 0                             
               print_freq: 200                           	[default: 100]
             reparse_data: False                         
           resize_or_crop: resize_and_crop               
               resolution: 128                           	[default: 64]
             sanity_check: False                         
             save_by_iter: False                         
          save_epoch_freq: 5                             
         save_latest_freq: 5000                          
           serial_batches: False                         
              skip_frames: 1                             
                   suffix:                               
                      tld: 0.7                           	[default: 0.5]
                      tlg: 0.3                           	[default: 0.5]
               train_mode: mixed                         	[default: frame]
            unroll_frames: 1                             
         update_html_freq: 200                           	[default: 1000]
         use_segmentation: False                         
          validation_freq: 5                             	[default: 10]
           validation_set: val                           	[default: test]
                  verbose: False                         
             weight_decay: 0                             
----------------- End -------------------
nframes: 25
dataset [BaseDataset] was created
nframes: 25
dataset [BaseDataset] was created
#training samples = 7480
#validation samples = 206
cpu
initialize network with xavier
initialize network with xavier
initialize network with xavier
model [DvdGanModel] was created
loading the module from /mnt/raid/patrickradner/checkpoints/river_relaxing_dvdgan_trajgru_128_3/latest_netG.pth
DvdConditionalGenerator(
  (encoder): ModuleList(
    (0): Sequential(
      (0): SpectralNorm(
        (module): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): GResBlock(
        (conv0): SpectralNorm(
          (module): Conv2d(32, 64, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
        )
        (conv1): SpectralNorm(
          (module): Conv2d(64, 64, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
        )
        (conv_sc): SpectralNorm(
          (module): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (CBNorm1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (CBNorm2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): GResBlock(
      (conv0): SpectralNorm(
        (module): Conv2d(64, 128, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv1): SpectralNorm(
        (module): Conv2d(128, 128, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv_sc): SpectralNorm(
        (module): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (CBNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (CBNorm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (2): GResBlock(
      (conv0): SpectralNorm(
        (module): Conv2d(128, 256, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv1): SpectralNorm(
        (module): Conv2d(256, 256, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv_sc): SpectralNorm(
        (module): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (CBNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (CBNorm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (conv): ModuleList(
    (0): ConvGRU(
      (cells): ModuleList(
        (0): TrajGRU(
          (i2h): Conv2d(256, 768, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (i2f_conv1): Conv2d(256, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (h2f_conv1): Conv2d(256, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (flows_conv): Conv2d(32, 10, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (ret): Conv2d(1280, 768, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (1): GResBlock(
      (conv0): SpectralNorm(
        (module): Conv2d(256, 256, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv1): SpectralNorm(
        (module): Conv2d(256, 256, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv_sc): SpectralNorm(
        (module): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (CBNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (CBNorm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (2): GResBlock(
      (conv0): SpectralNorm(
        (module): Conv2d(256, 128, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv1): SpectralNorm(
        (module): Conv2d(128, 128, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv_sc): SpectralNorm(
        (module): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (CBNorm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (CBNorm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (3): ConvGRU(
      (cells): ModuleList(
        (0): TrajGRU(
          (i2h): Conv2d(128, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (i2f_conv1): Conv2d(128, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (h2f_conv1): Conv2d(128, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (flows_conv): Conv2d(32, 10, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (ret): Conv2d(640, 384, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (4): GResBlock(
      (conv0): SpectralNorm(
        (module): Conv2d(128, 128, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv1): SpectralNorm(
        (module): Conv2d(128, 128, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv_sc): SpectralNorm(
        (module): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (CBNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (CBNorm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (5): GResBlock(
      (conv0): SpectralNorm(
        (module): Conv2d(128, 64, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv1): SpectralNorm(
        (module): Conv2d(64, 64, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv_sc): SpectralNorm(
        (module): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (CBNorm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (CBNorm2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (6): ConvGRU(
      (cells): ModuleList(
        (0): TrajGRU(
          (i2h): Conv2d(64, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (i2f_conv1): Conv2d(64, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (h2f_conv1): Conv2d(64, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (flows_conv): Conv2d(32, 10, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
          (ret): Conv2d(320, 192, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (7): GResBlock(
      (conv0): SpectralNorm(
        (module): Conv2d(64, 64, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv1): SpectralNorm(
        (module): Conv2d(64, 64, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv_sc): SpectralNorm(
        (module): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (CBNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (CBNorm2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (8): GResBlock(
      (conv0): SpectralNorm(
        (module): Conv2d(64, 32, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv1): SpectralNorm(
        (module): Conv2d(32, 32, kernel_size=[3, 3], stride=(1, 1), padding=(1, 1))
      )
      (conv_sc): SpectralNorm(
        (module): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (CBNorm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (CBNorm2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (colorize): SpectralNorm(
    (module): Conv2d(32, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
) odict_keys(['module.encoder.0.0.module.bias', 'module.encoder.0.0.module.weight_u', 'module.encoder.0.0.module.weight_v', 'module.encoder.0.0.module.weight_bar', 'module.encoder.0.1.conv0.module.bias', 'module.encoder.0.1.conv0.module.weight_u', 'module.encoder.0.1.conv0.module.weight_v', 'module.encoder.0.1.conv0.module.weight_bar', 'module.encoder.0.1.conv1.module.bias', 'module.encoder.0.1.conv1.module.weight_u', 'module.encoder.0.1.conv1.module.weight_v', 'module.encoder.0.1.conv1.module.weight_bar', 'module.encoder.0.1.conv_sc.module.bias', 'module.encoder.0.1.conv_sc.module.weight_u', 'module.encoder.0.1.conv_sc.module.weight_v', 'module.encoder.0.1.conv_sc.module.weight_bar', 'module.encoder.0.1.CBNorm1.weight', 'module.encoder.0.1.CBNorm1.bias', 'module.encoder.0.1.CBNorm1.running_mean', 'module.encoder.0.1.CBNorm1.running_var', 'module.encoder.0.1.CBNorm1.num_batches_tracked', 'module.encoder.0.1.CBNorm2.weight', 'module.encoder.0.1.CBNorm2.bias', 'module.encoder.0.1.CBNorm2.running_mean', 'module.encoder.0.1.CBNorm2.running_var', 'module.encoder.0.1.CBNorm2.num_batches_tracked', 'module.encoder.1.conv0.module.bias', 'module.encoder.1.conv0.module.weight_u', 'module.encoder.1.conv0.module.weight_v', 'module.encoder.1.conv0.module.weight_bar', 'module.encoder.1.conv1.module.bias', 'module.encoder.1.conv1.module.weight_u', 'module.encoder.1.conv1.module.weight_v', 'module.encoder.1.conv1.module.weight_bar', 'module.encoder.1.conv_sc.module.bias', 'module.encoder.1.conv_sc.module.weight_u', 'module.encoder.1.conv_sc.module.weight_v', 'module.encoder.1.conv_sc.module.weight_bar', 'module.encoder.1.CBNorm1.weight', 'module.encoder.1.CBNorm1.bias', 'module.encoder.1.CBNorm1.running_mean', 'module.encoder.1.CBNorm1.running_var', 'module.encoder.1.CBNorm1.num_batches_tracked', 'module.encoder.1.CBNorm2.weight', 'module.encoder.1.CBNorm2.bias', 'module.encoder.1.CBNorm2.running_mean', 'module.encoder.1.CBNorm2.running_var', 'module.encoder.1.CBNorm2.num_batches_tracked', 'module.encoder.2.conv0.module.bias', 'module.encoder.2.conv0.module.weight_u', 'module.encoder.2.conv0.module.weight_v', 'module.encoder.2.conv0.module.weight_bar', 'module.encoder.2.conv1.module.bias', 'module.encoder.2.conv1.module.weight_u', 'module.encoder.2.conv1.module.weight_v', 'module.encoder.2.conv1.module.weight_bar', 'module.encoder.2.conv_sc.module.bias', 'module.encoder.2.conv_sc.module.weight_u', 'module.encoder.2.conv_sc.module.weight_v', 'module.encoder.2.conv_sc.module.weight_bar', 'module.encoder.2.CBNorm1.weight', 'module.encoder.2.CBNorm1.bias', 'module.encoder.2.CBNorm1.running_mean', 'module.encoder.2.CBNorm1.running_var', 'module.encoder.2.CBNorm1.num_batches_tracked', 'module.encoder.2.CBNorm2.weight', 'module.encoder.2.CBNorm2.bias', 'module.encoder.2.CBNorm2.running_mean', 'module.encoder.2.CBNorm2.running_var', 'module.encoder.2.CBNorm2.num_batches_tracked', 'module.conv.0.cells.0.i2h.weight', 'module.conv.0.cells.0.i2h.bias', 'module.conv.0.cells.0.i2f_conv1.weight', 'module.conv.0.cells.0.i2f_conv1.bias', 'module.conv.0.cells.0.h2f_conv1.weight', 'module.conv.0.cells.0.h2f_conv1.bias', 'module.conv.0.cells.0.flows_conv.weight', 'module.conv.0.cells.0.flows_conv.bias', 'module.conv.0.cells.0.ret.weight', 'module.conv.0.cells.0.ret.bias', 'module.conv.1.conv0.module.bias', 'module.conv.1.conv0.module.weight_u', 'module.conv.1.conv0.module.weight_v', 'module.conv.1.conv0.module.weight_bar', 'module.conv.1.conv1.module.bias', 'module.conv.1.conv1.module.weight_u', 'module.conv.1.conv1.module.weight_v', 'module.conv.1.conv1.module.weight_bar', 'module.conv.1.conv_sc.module.bias', 'module.conv.1.conv_sc.module.weight_u', 'module.conv.1.conv_sc.module.weight_v', 'module.conv.1.conv_sc.module.weight_bar', 'module.conv.1.CBNorm1.weight', 'module.conv.1.CBNorm1.bias', 'module.conv.1.CBNorm1.running_mean', 'module.conv.1.CBNorm1.running_var', 'module.conv.1.CBNorm1.num_batches_tracked', 'module.conv.1.CBNorm2.weight', 'module.conv.1.CBNorm2.bias', 'module.conv.1.CBNorm2.running_mean', 'module.conv.1.CBNorm2.running_var', 'module.conv.1.CBNorm2.num_batches_tracked', 'module.conv.2.conv0.module.bias', 'module.conv.2.conv0.module.weight_u', 'module.conv.2.conv0.module.weight_v', 'module.conv.2.conv0.module.weight_bar', 'module.conv.2.conv1.module.bias', 'module.conv.2.conv1.module.weight_u', 'module.conv.2.conv1.module.weight_v', 'module.conv.2.conv1.module.weight_bar', 'module.conv.2.conv_sc.module.bias', 'module.conv.2.conv_sc.module.weight_u', 'module.conv.2.conv_sc.module.weight_v', 'module.conv.2.conv_sc.module.weight_bar', 'module.conv.2.CBNorm1.weight', 'module.conv.2.CBNorm1.bias', 'module.conv.2.CBNorm1.running_mean', 'module.conv.2.CBNorm1.running_var', 'module.conv.2.CBNorm1.num_batches_tracked', 'module.conv.2.CBNorm2.weight', 'module.conv.2.CBNorm2.bias', 'module.conv.2.CBNorm2.running_mean', 'module.conv.2.CBNorm2.running_var', 'module.conv.2.CBNorm2.num_batches_tracked', 'module.conv.3.cells.0.i2h.weight', 'module.conv.3.cells.0.i2h.bias', 'module.conv.3.cells.0.i2f_conv1.weight', 'module.conv.3.cells.0.i2f_conv1.bias', 'module.conv.3.cells.0.h2f_conv1.weight', 'module.conv.3.cells.0.h2f_conv1.bias', 'module.conv.3.cells.0.flows_conv.weight', 'module.conv.3.cells.0.flows_conv.bias', 'module.conv.3.cells.0.ret.weight', 'module.conv.3.cells.0.ret.bias', 'module.conv.4.conv0.module.bias', 'module.conv.4.conv0.module.weight_u', 'module.conv.4.conv0.module.weight_v', 'module.conv.4.conv0.module.weight_bar', 'module.conv.4.conv1.module.bias', 'module.conv.4.conv1.module.weight_u', 'module.conv.4.conv1.module.weight_v', 'module.conv.4.conv1.module.weight_bar', 'module.conv.4.conv_sc.module.bias', 'module.conv.4.conv_sc.module.weight_u', 'module.conv.4.conv_sc.module.weight_v', 'module.conv.4.conv_sc.module.weight_bar', 'module.conv.4.CBNorm1.weight', 'module.conv.4.CBNorm1.bias', 'module.conv.4.CBNorm1.running_mean', 'module.conv.4.CBNorm1.running_var', 'module.conv.4.CBNorm1.num_batches_tracked', 'module.conv.4.CBNorm2.weight', 'module.conv.4.CBNorm2.bias', 'module.conv.4.CBNorm2.running_mean', 'module.conv.4.CBNorm2.running_var', 'module.conv.4.CBNorm2.num_batches_tracked', 'module.conv.5.conv0.module.bias', 'module.conv.5.conv0.module.weight_u', 'module.conv.5.conv0.module.weight_v', 'module.conv.5.conv0.module.weight_bar', 'module.conv.5.conv1.module.bias', 'module.conv.5.conv1.module.weight_u', 'module.conv.5.conv1.module.weight_v', 'module.conv.5.conv1.module.weight_bar', 'module.conv.5.conv_sc.module.bias', 'module.conv.5.conv_sc.module.weight_u', 'module.conv.5.conv_sc.module.weight_v', 'module.conv.5.conv_sc.module.weight_bar', 'module.conv.5.CBNorm1.weight', 'module.conv.5.CBNorm1.bias', 'module.conv.5.CBNorm1.running_mean', 'module.conv.5.CBNorm1.running_var', 'module.conv.5.CBNorm1.num_batches_tracked', 'module.conv.5.CBNorm2.weight', 'module.conv.5.CBNorm2.bias', 'module.conv.5.CBNorm2.running_mean', 'module.conv.5.CBNorm2.running_var', 'module.conv.5.CBNorm2.num_batches_tracked', 'module.conv.6.cells.0.i2h.weight', 'module.conv.6.cells.0.i2h.bias', 'module.conv.6.cells.0.i2f_conv1.weight', 'module.conv.6.cells.0.i2f_conv1.bias', 'module.conv.6.cells.0.h2f_conv1.weight', 'module.conv.6.cells.0.h2f_conv1.bias', 'module.conv.6.cells.0.flows_conv.weight', 'module.conv.6.cells.0.flows_conv.bias', 'module.conv.6.cells.0.ret.weight', 'module.conv.6.cells.0.ret.bias', 'module.conv.7.conv0.module.bias', 'module.conv.7.conv0.module.weight_u', 'module.conv.7.conv0.module.weight_v', 'module.conv.7.conv0.module.weight_bar', 'module.conv.7.conv1.module.bias', 'module.conv.7.conv1.module.weight_u', 'module.conv.7.conv1.module.weight_v', 'module.conv.7.conv1.module.weight_bar', 'module.conv.7.conv_sc.module.bias', 'module.conv.7.conv_sc.module.weight_u', 'module.conv.7.conv_sc.module.weight_v', 'module.conv.7.conv_sc.module.weight_bar', 'module.conv.7.CBNorm1.weight', 'module.conv.7.CBNorm1.bias', 'module.conv.7.CBNorm1.running_mean', 'module.conv.7.CBNorm1.running_var', 'module.conv.7.CBNorm1.num_batches_tracked', 'module.conv.7.CBNorm2.weight', 'module.conv.7.CBNorm2.bias', 'module.conv.7.CBNorm2.running_mean', 'module.conv.7.CBNorm2.running_var', 'module.conv.7.CBNorm2.num_batches_tracked', 'module.conv.8.conv0.module.bias', 'module.conv.8.conv0.module.weight_u', 'module.conv.8.conv0.module.weight_v', 'module.conv.8.conv0.module.weight_bar', 'module.conv.8.conv1.module.bias', 'module.conv.8.conv1.module.weight_u', 'module.conv.8.conv1.module.weight_v', 'module.conv.8.conv1.module.weight_bar', 'module.conv.8.conv_sc.module.bias', 'module.conv.8.conv_sc.module.weight_u', 'module.conv.8.conv_sc.module.weight_v', 'module.conv.8.conv_sc.module.weight_bar', 'module.conv.8.CBNorm1.weight', 'module.conv.8.CBNorm1.bias', 'module.conv.8.CBNorm1.running_mean', 'module.conv.8.CBNorm1.running_var', 'module.conv.8.CBNorm1.num_batches_tracked', 'module.conv.8.CBNorm2.weight', 'module.conv.8.CBNorm2.bias', 'module.conv.8.CBNorm2.running_mean', 'module.conv.8.CBNorm2.running_var', 'module.conv.8.CBNorm2.num_batches_tracked', 'module.colorize.module.bias', 'module.colorize.module.weight_u', 'module.colorize.module.weight_v', 'module.colorize.module.weight_bar'])
